<?xml version="1.0" encoding="utf-8"?>
<cw:DesktopWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx" 
				  xmlns:cw="net.lanelife.framework.cw.*" 
				  xmlns:components="net.lanelife.cat77.view.components.*"
				  title="CAT77 V1.0"
				  taskbarButtonVisible="false"
				  width="250" height="520" minWidth="230" minHeight="300" x="20" y="10"
				  skinClass="net.lanelife.cat77.view.skins.MainWindowSkin"
				  creationComplete="init()" xmlns:component="net.lanelife.framework.component.*" xmlns:desktop="net.lanelife.framework.desktop.*" xmlns:windows="net.lanelife.cat77.view.windows.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import net.lanelife.cat77.EventType;
			import net.lanelife.framework.event.XEvent;
			import net.lanelife.framework.event.XEventDispatcher;
			import net.lanelife.cat77.WebIMAppContext;
			import net.lanelife.cat77.service.DepartmentService;
			import net.lanelife.cat77.service.EmployeeService;
			import net.lanelife.cat77.vo.Employee;
			import net.lanelife.framework.cw.WindowManager;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.events.IndexChangeEvent;
			
			private var _appContext:WebIMAppContext;
			
			public function set appContext(value:WebIMAppContext):void {
				_appContext = value;	
			}
			
			[Bindable]
			public function get appContext():WebIMAppContext {
				return _appContext;
			}

			private function init():void
			{
				DepartmentService.findAll().addResultListener(function(event:ResultEvent):void {
					
					var list:ArrayCollection = event.result as ArrayCollection;
					if (list != null) {
						for (var i:Number=0; i<list.length; i++) {
							var sort:Sort = new Sort();
							var sortField:SortField = new SortField();
							sortField.compareFunction = function sortFunction(a:Employee, b:Employee):int { 
								
								a.appContext = appContext;
								b.appContext = appContext;
								
								if (a.status==1&&b.status==1)
									return ObjectUtil.stringCompare(a.username, b.username);
								else if (a.status==1)
									return -1;
								else if (b.status==1)
									return 1;
								return ObjectUtil.stringCompare(a.username, b.username);
							};
							sort.fields = [sortField];
							list[i].employees.sort = sort;
							list[i].employees.refresh();
						}
						var deptSort:Sort = new Sort();
						deptSort.fields = [new SortField("name")];
						list.sort = deptSort;
						list.refresh();
						appContext.departmentList = list;
					}
				});
			 
				EmployeeService.getTeamEmployee(appContext.employee).addResultListener(function(data:Object):void {
					
					var list:ArrayCollection = data.result as ArrayCollection;
					appContext.teamEmployeeList = list;
				});
			}
			
			protected function status_changeHandler(event:IndexChangeEvent):void
			{
				new XEvent(EventType.STATUS_CHANGE_EVENT).setData({employee:appContext.employee, status: status.selectedItem.status}).dispatch();
			}
			
			private function showProfileWindow():void
			{
				var profileWindow:ProfileWindow = WindowManager.get("profileWindow" + appContext.employee.id) as ProfileWindow;
				if (profileWindow==null)
				{
					profileWindow = new ProfileWindow();
					profileWindow.id = "profileWindow" + appContext.employee.id;
					profileWindow.appContext = appContext;
					profileWindow.ownerWindow = WindowManager.get("mainWindow");
					profileWindow.contentCreationCompleteHandler();
				}
				profileWindow.show();
			}
			
			public function remove():void
			{
				super.close();
			}
			
			protected function createTeam():void
			{
				var teamEditWindow:TeamEditWindow = WindowManager.get("teamEditWindow") as TeamEditWindow;
				if (teamEditWindow==null)
				{
					teamEditWindow = new TeamEditWindow();
					teamEditWindow.id = "teamEditWindow";
					teamEditWindow.ownerWindow = WindowManager.get("mainWindow");
				}
				teamEditWindow.show();
			}
			
		]]>
	</fx:Script>
	
	<s:Group left="4" top="5" width="44" height="44" buttonMode="true" useHandCursor="true" click="showProfileWindow()">
		<s:Rect left="0" top="0" right="0" bottom="0" radiusX="2">
			<s:stroke>
				<s:SolidColorStroke color="#000000" alpha="0.20" weight="1" caps="square" />
			</s:stroke>
		</s:Rect>
		<s:Rect left="1" top="1" right="1" bottom="1" radiusX="2">
			<s:stroke>
				<s:SolidColorStroke color="#ffffff" alpha="0.20" weight="1" caps="square" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#ffffff"/>
			</s:fill>
		</s:Rect>
		<s:Image id="face" left="2" top="2" right="2" bottom="2" smooth="true" 
				 source="{appContext.employee.face}" />
	</s:Group>
	
	<s:Group left="49" top="6" right="11">
		<s:DropDownList id="status"  
						selectedIndex="{(appContext.employee.status==1)?0:1}"
						width="35" height="22"
						skinClass="net.lanelife.framework.cmp.login.StatusDropDownListSkin"
						change="status_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList>
					<fx:Object status="1" text="我在线上" icon="@Embed(source='assets/icons/online.png')"/>
					<fx:Object status="2" text="隐身" icon="@Embed(source='assets/icons/stealth.png')"/>
				</s:ArrayList>
			</s:dataProvider>
		</s:DropDownList>
		<s:Label text="{appContext.employee.username}" left="40" top="5" fontWeight="bold" />
		<s:Group top="24" left="6" right="0">
			<s:Label text="{appContext.employee.sign}" left="0" right="0" lineBreak="explicit" />
		</s:Group>
	</s:Group>
	
	<!--搜索框-->
	<s:Rect left="2" right="2" top="58" height="28" radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="#000000" alpha="0.20"/>
				<s:GradientEntry color="#000000" alpha="0.04"/>
			</s:LinearGradientStroke>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xFFFFFF" />
		</s:fill>
	</s:Rect>
	
	<s:ButtonBar dataProvider="{viewStack}" 
				 requireSelection="true"
				 left="0" top="90" right="0" height="34"
				 skinClass="net.lanelife.cat77.view.skins.MainButtonBarSkin"/>
	
	<mx:ViewStack id="viewStack" left="0" top="124" bottom="31" right="0" creationPolicy="all">
		<s:NavigatorContent label="同事" width="100%" height="100%">
			<components:EmployeeList departmentList="{appContext.departmentList}" width="100%" height="100%" />
		</s:NavigatorContent>
		<s:NavigatorContent label="群组">
			<components:TeamList width="100%" top="0" bottom="30" />
			<s:Group height="30" bottom="0" width="100%">
				<s:Line left="0" top="0" right="0">
					<s:stroke>
						<s:SolidColorStroke color="#c2e0f0" weight="1" caps="square" />
					</s:stroke>
				</s:Line>
				<s:Rect left="0" top="1" right="0" bottom="0">
					<s:fill>
						<s:SolidColor color="#ffffff"/>
					</s:fill>
				</s:Rect>
				<s:Rect left="1" top="2" right="1" bottom="1">
					<s:fill>
						<s:LinearGradient rotation="90">  
							<s:entries>  
								<s:GradientEntry color="#edf5fa" />
								<s:GradientEntry color="#ddeff7" />  
							</s:entries>  
						</s:LinearGradient>  
					</s:fill>
				</s:Rect>
				<s:Button right="5" verticalCenter="0" label="创建群" click="createTeam()" />
			</s:Group>
		</s:NavigatorContent>
	</mx:ViewStack>
	
	<windows:CatIMStartMenu bottom="35" left="0" visible="{startButton.selected}" includeInLayout="{startButton.selected}" />
	
	<cw:StartButton id="startButton" left="0" top="459" width="36" height="32"
					downIcon="images/start_button_over.png" overIcon="images/start_button_over.png"
					selectedIcon="images/start_button_over.png" upIcon="images/start_button_up.png"/>
	
	<s:ToggleButton id="skinButton" bottom="5" right="5" width="21" height="21"
					icon="@Embed(source='assets/icons/101.png')"
					skinClass="net.lanelife.cat77.view.skins.IconToggleButtonSkin"/>
	<component:SkinChooser bottom="27" width="219" right="5" 
							visible="{skinButton.selected}"
							includeInLayout="{skinButton.selected}"/>
	
	
	
</cw:DesktopWindow>
