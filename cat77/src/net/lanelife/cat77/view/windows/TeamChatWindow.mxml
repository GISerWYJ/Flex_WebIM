<?xml version="1.0" encoding="utf-8"?>
<cw:DesktopWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s="library://ns.adobe.com/flex/spark" 
				  xmlns:mx="library://ns.adobe.com/flex/mx" 
				  xmlns:cw="net.lanelife.framework.cw.*"
				  xmlns:components="net.lanelife.cat77.view.components.*"
				  xmlns:vo="net.lanelife.cat77.vo.*"
				  title="{team.name}" 
				  icon="{team.icon}"
				  width="654" height="500" minWidth="604" minHeight="480" x="320" y="10"
				  windowFocusIn="windowFocusInHandler(event)"
				  creationComplete="init()" >
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.elements.DivElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import net.lanelife.cat77.EventType;
			import net.lanelife.framework.event.XEvent;
			import net.lanelife.cat77.WebIMAppContext;
			import net.lanelife.cat77.service.TeamMessageService;
			import net.lanelife.cat77.service.TeamService;
			import net.lanelife.framework.desktop.MessageBoxItem;
			import net.lanelife.cat77.vo.Employee;
			import net.lanelife.cat77.vo.Team;
			import net.lanelife.cat77.vo.TeamEmployee;
			import net.lanelife.cat77.vo.TeamMessage;
			import net.lanelife.framework.cw.Alert;
			import net.lanelife.framework.cw.Prompt;
			import net.lanelife.framework.cw.WindowManager;
			import net.lanelife.framework.cw.events.WindowEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.utils.TextFlowUtil;
			
			[Bindable]
			private var model:WebIMAppContext = WebIMAppContext.getInstance();
			
			[Bindable]
			public var team:Team; //对话群
			
			[Bindable]
			private var teamManager:Employee = new Employee();
			
			protected function init():void
			{
				if (team.teamEmployees.length==0) //如果该群还没加载过人员则进行加载
				{
					teamService.getTeamEmployee(team);
				}
				else
				{ //如果人员加载过则取出管理员
					for (var i:Number=0; i<team.teamEmployees.length; i++)
					{
						if (team.teamEmployees[i].ismanager)
						{
							teamManager = team.teamEmployees[i].employee;
						}
					}
				}
				
				var mbi:MessageBoxItem = model.getMessageBoxItem(MessageBoxItem.TYPE_TEAM_MESSAGE, team.id); //取出消息盒子条目
				if (mbi!=null)
				{
					for (var j:Number=0; j<mbi.messages.length; j++)
					{
						showMessage(mbi.messages[j]); //循环取出消息进行显示;
					}
					model.messageBoxItemList.removeItemAt(model.messageBoxItemList.getItemIndex(mbi)); //移除消息盒子条目
				}
				model.updateMainWindowTrayIcon(); //更新系统托盘图标
			}
			
			protected function windowFocusInHandler(event:WindowEvent):void
			{
				editor.setEditorFocus(); //当对话窗口获得焦点时设置光标焦点在编辑器的输入框中
			}
			
			protected function teamService_resultHandler(event:ResultEvent):void
			{
				team.teamEmployees = event.result as ArrayCollection;
				for (var i:Number=0; i<team.teamEmployees.length; i++)
				{
					//从部门列表取人员以绑定人员的状态变更
					team.teamEmployees[i].employee = model.getEmployee(team.teamEmployees[i].employee.id);
					if (team.teamEmployees[i].ismanager)
					{
						teamManager = team.teamEmployees[i].employee;
					}
				}
				var sort:Sort = new Sort();
				var sortField:SortField = new SortField();
				sortField.compareFunction = function sortFunction(a:TeamEmployee, b:TeamEmployee):int { 
					if (a.employee.status==1&&b.employee.status==1)
						return ObjectUtil.stringCompare(a.employee.username, b.employee.username);
					else if (a.employee.status==1)
						return -1;
					else if (b.employee.status==1)
						return 1;
					return ObjectUtil.stringCompare(a.employee.username, b.employee.username);
				};
				sort.fields = [sortField];
				team.teamEmployees.sort = sort;
				team.teamEmployees.refresh();
			}
			
			protected function teamService_faultHandler(event:FaultEvent):void
			{
				Prompt.show(this,"获取群成员列表失败,请尝试重新打开群聊天窗口!","错误提示",Prompt.OK,null,"images/plaint.png");
			}
			
			protected function teamSetupButton_clickHandler(event:MouseEvent):void
			{
				var teamEditWindow:TeamEditWindow = WindowManager.get("teamEditWindow"+team.id) as TeamEditWindow;
				if (teamEditWindow==null)
				{
					teamEditWindow = new TeamEditWindow();
					teamEditWindow.id = "teamEditWindow"+team.id;
					teamEditWindow.editTeam = team;
					teamEditWindow.ownerWindow = WindowManager.get("mainWindow");
				}
				teamEditWindow.show();
			}
			
			private function dissolve():void
			{
				Prompt.show(this,"该操作不可逆,将解除群内所有成员的群友关系,\r\n同时将删除该群的所有资料,您真的要删除该群吗?","提示",
					Prompt.YES|Prompt.NO,
					function(event:CloseEvent):void{
						if (event.detail==Prompt.YES) {
							
							TeamService.dissolve(team, teamManager).addResultListener(function result(data:Object):void {
								var team:Team = data.result as Team;
								var model:WebIMAppContext = WebIMAppContext.getInstance();
								for (var i:Number=0; i<model.teamEmployeeList.length; i++)
								{
									if (model.teamEmployeeList[i].team.id==team.id)
									{
										model.teamEmployeeList.removeItemAt(i);
									}
								}
								var window:TeamChatWindow = WindowManager.get("teamChatWindow"+team.id) as TeamChatWindow;
								if (window!=null)
								{
									window.close(); //关闭对话窗口
								}
								var mbi:MessageBoxItem = model.getMessageBoxItem(MessageBoxItem.TYPE_TEAM_MESSAGE, team.id); //取出消息盒子条目
								if (mbi!=null)
								{
									model.messageBoxItemList.removeItemAt(model.messageBoxItemList.getItemIndex(mbi)); //移除消息盒子条目
								}
								model.updateMainWindowTrayIcon(); //更新系统托盘图标
							}).addFaultListener(function fault(info:Object):void {
								Alert.show("解散群失败,请稍候重试!"+info.toString(),"错误提示")
							});
						}
					},"images/plaint.png",Prompt.NO
				);
			}
			
			private function quit():void
			{
				Prompt.show(this,"您真的要退出该群吗?","提示",
					Prompt.YES|Prompt.NO,
					function(event:CloseEvent):void{
						if (event.detail==Prompt.YES) {
							
							TeamService.quit(team, teamManager).addResultListener(function result(data:Object):void {
								var team:Team = data.result as Team;
								var model:WebIMAppContext = WebIMAppContext.getInstance();
								for (var i:Number=0; i<model.teamEmployeeList.length; i++)
								{
									if (model.teamEmployeeList[i].team.id==team.id)
									{
										model.teamEmployeeList.removeItemAt(i);
									}
								}
								var window:TeamChatWindow = WindowManager.get("teamChatWindow"+team.id) as TeamChatWindow;
								if (window!=null)
								{
									window.close(); //关闭对话窗口
								}
								var mbi:MessageBoxItem = model.getMessageBoxItem(MessageBoxItem.TYPE_TEAM_MESSAGE, team.id); //取出消息盒子条目
								if (mbi!=null)
								{
									model.messageBoxItemList.removeItemAt(model.messageBoxItemList.getItemIndex(mbi)); //移除消息盒子条目
								}
								model.updateMainWindowTrayIcon(); //更新系统托盘图标
							}).addFaultListener(function fault(info:Object):void {
								Alert.show("退群失败,请稍候重试!"+info.toString(),"错误提示")
							})
						}
					},"images/plaint.png",Prompt.NO
				);
			}
			
			public function showMessage(message:TeamMessage):void
			{
				var username:String = message.sender.username;
				var dt:Date = message.dt;
				var content:String = message.content;
				
				var div:DivElement = new DivElement(); //创建一个包含姓名和内容的div
				
				var np:ParagraphElement = new ParagraphElement(); //创建名字和消息时间的段落
				var ns:SpanElement = new SpanElement();
				np.lineHeight = 25;
				ns.color = 0x0000ff; //对方名字颜色
				ns.text = username+"  "+df.format(dt);
				np.addChild(ns);
				
				var xml:XML = new XML(content);
				var mp:ParagraphElement = new ParagraphElement(); //创建消息内容段落
				var ms:SpanElement = new SpanElement();
				mp.paddingLeft = 19;
				mp.fontFamily = xml.attribute("fontFamily").toString();
				mp.fontSize = xml.attribute("fontSize");
				mp.color = xml.attribute("color").toString();
				mp.fontWeight = xml.attribute("fontWeight");
				mp.fontStyle = xml.attribute("fontStyle");
				mp.textDecoration = xml.attribute("textDecoration");
				ms.text = xml.child(0);
				mp.addChild(ms);
				
				div.addChild(np);
				div.addChild(mp);
				
				contents.textFlow.addChild(div);
				
				//很奇怪要执行2此才能将滚动条移动到底部
				contents.validateNow();
				contents.scroller.viewport.verticalScrollPosition=contents.scroller.viewport.contentHeight;
				contents.validateNow();
				contents.scroller.viewport.verticalScrollPosition=contents.scroller.viewport.contentHeight;
			}
			
			private function send():void
			{
				var mp:ParagraphElement = editor.content();
				if (mp!=null)
				{
					var mc:String = SpanElement(mp.getChildAt(0)).text;
					if (mc.length<4000)
					{
						var div:DivElement = new DivElement(); //创建一个包含姓名和内容的div
						
						var np:ParagraphElement = new ParagraphElement(); //创建名字和消息时间的段落
						var ns:SpanElement = new SpanElement();
						np.lineHeight = 25;
						ns.color = 0x008040; //自己名字的颜色
						ns.text = model.employee.username+"  "+df.format(new Date());
						np.addChild(ns);
						
						div.addChild(np);
						div.addChild(mp);
						
						contents.textFlow.addChild(div);
						
						contents.validateNow();
						contents.scroller.viewport.verticalScrollPosition=contents.scroller.viewport.contentHeight;
						contents.validateNow();
						contents.scroller.viewport.verticalScrollPosition=contents.scroller.viewport.contentHeight;
						
						var mtf:TextFlow = new TextFlow();
						mtf.addChild(mp.deepCopy());
						
						var message:TeamMessage = new TeamMessage(); //new一条消息
						message.sender = model.employee; //设置发送者为自己
						message.team = team; //设置接收者为对话人员
						message.content = TextFlowUtil.export(mtf).children(); //设置消息内容
						//分发消息发送事件
						
						TeamMessageService.send(message, team.teamEmployees);
							
						editor.clear();
					}
					else
					{
						Prompt.show(this,"发送消息内容超长,请分条发送!","发送消息",Prompt.OK,null,"images/plaint.png");
					}
				}
				editor.setEditorFocus();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:ChannelSet id="mycs">
			<s:AMFChannel url="/messagebroker/amf"/>
		</s:ChannelSet>
		<s:RemoteObject id="teamService" channelSet="{mycs}"
						destination="teamService"
						showBusyCursor="true"
						result="teamService_resultHandler(event)"
						fault="teamService_faultHandler(event)"/>
		
		<mx:DateFormatter id="df" formatString="YYYY-MM-DD JJ:NN:SS" />
	</fx:Declarations>
	
	<!--群图标-->
	<s:Group left="8" top="6" width="30" height="30">
		<s:Rect left="0" top="0" right="0" bottom="0" radiusX="2">
			<s:stroke>
				<s:SolidColorStroke color="#000000" alpha="0.20" weight="1" caps="square" />
			</s:stroke>
		</s:Rect>
		<s:Rect left="1" top="1" right="1" bottom="1" radiusX="2">
			<s:stroke>
				<s:SolidColorStroke color="#ffffff" alpha="0.20" weight="1" caps="square" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#ffffff"/>
			</s:fill>
		</s:Rect>
		<s:Image left="2" top="2" right="2" bottom="2" smooth="true" source="{team.icon}" />
	</s:Group>
	
	<!--姓名与个性签名-->
	<s:Group left="45" top="8" right="0">
		<s:Label text="{team.name}" fontWeight="bold">
			<s:filters>
				<s:GlowFilter color="#ffffff" blurX="2" blurY="2" strength="3" alpha="0.3"/>
			</s:filters>
		</s:Label>
		<s:TextInput text="{team.summary}" 
					 toolTip="{team.summary}" 
					 editable="false"
					 left="0" top="15" right="10" paddingTop="0" paddingLeft="0" 
					 contentBackgroundAlpha="0" borderVisible="false" focusAlpha="0">
			<s:filters>
				<s:GlowFilter color="#ffffff" blurX="2" blurY="2" strength="3" alpha="0.3"/>
			</s:filters>
		</s:TextInput>
	</s:Group>
	
	<!--功能按钮区域-->
	<s:HGroup left="5" top="43" right="0">
		<s:Button id="teamSetupButton" icon="@Embed(source='assets/icons/401.png')" 
				  width="34" height="36"
				  skinClass="net.lanelife.cat77.view.skins.IconButtonSkin"
				  click="teamSetupButton_clickHandler(event)" toolTip="群设置"
				  visible="{teamManager.id==model.employee.id}"
				  includeInLayout="{teamManager.id==model.employee.id}"/>
		<s:Button icon="@Embed(source='assets/icons/402.png')" 
				  width="34" height="36"
				  skinClass="net.lanelife.cat77.view.skins.IconButtonSkin"
				  click="dissolve()" toolTip="解散群" 
				  visible="{teamManager.id==model.employee.id}"
				  includeInLayout="{teamManager.id==model.employee.id}"/>
		<s:Button icon="@Embed(source='assets/icons/403.png')" 
				  width="34" height="36"
				  skinClass="net.lanelife.cat77.view.skins.IconButtonSkin"
				  click="quit()" toolTip="退出群"
				  visible="{teamManager.id!=model.employee.id}"
				  includeInLayout="{teamManager.id!=model.employee.id}"/>
	</s:HGroup>
	
	
	<s:HGroup left="0" top="81" right="0" bottom="1" gap="0">
		<!--左-->
		<s:Group width="100%" height="100%">
			<s:VGroup left="0" top="0" right="0" bottom="30" gap="0">
				<!--消息内容显示区域-->
				<s:Group width="100%" height="100%">
					<s:Rect left="0" top="0" right="0" bottom="0">
						<s:fill>  
							<s:LinearGradient rotation="90">  
								<s:entries>  
									<s:GradientEntry color="#ffffff" alpha="0.85" />  
									<s:GradientEntry color="#ffffff" alpha="0.95" />
								</s:entries>  
							</s:LinearGradient>  
						</s:fill>
					</s:Rect>
					<s:TextArea id="contents" 
								left="0" top="0" right="0" bottom="0"
								paddingLeft="5" contentBackgroundAlpha="0" paddingBottom="10"
								borderVisible="false" focusAlpha="0" editable="false"/>
				</s:Group>
				<!--编辑器-->
				<components:SimpleChatEditor id="editor" height="120" width="100%" submit="send()"/>
			</s:VGroup>
			<!--底部按钮区域-->
			<s:Group height="30" left="0" right="0" bottom="0">
				<s:Rect left="0" top="0" right="0" bottom="0" bottomLeftRadiusX="4">
					<s:fill>  
						<s:LinearGradient rotation="90">  
							<s:entries>  
								<s:GradientEntry color="#ffffff" alpha="0.9" />  
								<s:GradientEntry color="#ffffff" alpha="0.6" /> 
							</s:entries>  
						</s:LinearGradient>  
					</s:fill>
				</s:Rect>
				<s:Button id="closeBtn" label="关闭" bottom="4" right="80" click="close()" />
				<s:Button id="sendBtn" label="发送" bottom="4" right="5" click="send()" />
			</s:Group>
		</s:Group>
		<!--右-->
		<s:Group width="200" height="100%">
			<s:Rect left="0" top="0" right="0" bottom="0" alpha="0.95" bottomRightRadiusX="4">
				<s:fill>
					<s:SolidColor color="#ffffff"/>
				</s:fill>
			</s:Rect>
			
			<s:Group left="2" top="2" bottom="2" right="2">
				
				<s:Group left="0" top="0" right="0" height="178">
					<s:Rect left="0" top="0" right="0" bottom="0" radiusX="2">
						<s:stroke>
							<s:SolidColorStroke color="#cde1eb"/>
						</s:stroke>
					</s:Rect>
					<s:Rect left="2" top="2" right="2" height="25" topLeftRadiusX="2" topRightRadiusX="2">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:entries>
									<s:GradientEntry color="#daf0f8"/>
									<s:GradientEntry color="#daf0f8" alpha="0"/>
								</s:entries>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
					<s:Label left="5" top="7" text="群公告" />
					<s:TextArea text="{team.placard}" editable="false"
								left="2" top="25" right="2" bottom="2"
								borderVisible="false" focusAlpha="0" contentBackgroundAlpha="0"
								skinClass="spark.skins.spark.TextAreaSkin"/>
				</s:Group>
				
				<s:Group left="0" bottom="0" right="0" height="226">
					<s:Rect left="0" top="0" right="0" bottom="0" radiusX="2">
						<s:stroke>
							<s:SolidColorStroke color="#cde1eb"/>
						</s:stroke>
					</s:Rect>
					<s:Rect left="2" top="2" right="2" height="25" topLeftRadiusX="2" topRightRadiusX="2">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:entries>
									<s:GradientEntry color="#daf0f8"/>
									<s:GradientEntry color="#daf0f8" alpha="0"/>
								</s:entries>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
					<s:Label left="5" top="7" text="群成员" />
					<s:Scroller left="2" top="25" right="2" bottom="2">
						<s:Group left="0" top="0" right="0" bottom="0">
							<s:List left="0" top="0" right="0" bottom="0" contentBackgroundAlpha="0"
									borderVisible="false" rollOverColor="#e9f6fb" selectionColor="#358ccc"
									dataProvider="{team.teamEmployees}">
								<s:itemRenderer>
									<fx:Component>
										<s:ItemRenderer height="24">
											<fx:Script>
												<![CDATA[
													import spark.filters.ColorMatrixFilter;
													
													private function faceFilter(status:Number):Array
													{
														if (status==0 || status==2)
														{
															return [new ColorMatrixFilter(
																[0.3086, 0.6094, 0.0820, 0, 0, 0.3086, 0.6094, 0.0820, 0,0, 0.3086, 0.6094, 0.0820, 0, 0, 0, 0, 0, 1, 0]
															)];
														}
														return null;
													}
												]]>
											</fx:Script>
											<s:Image source="@Embed(source='assets/icons/tm.png')" 
													 visible="{data.ismanager}"
													 smooth="true" left="5" width="12" height="12" verticalCenter="0"/>
											<s:Image source="{data.employee.face}" 
													 filters="{faceFilter(data.employee.status)}"
													 smooth="true" left="20" width="18" height="18" verticalCenter="0"/>
											<s:Label text="{data.employee.username}" 
													 left="42" top="0" bottom="0" verticalAlign="middle"/>
										</s:ItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:List>
						</s:Group>
					</s:Scroller>
					
				</s:Group>
				
			</s:Group>
			
		</s:Group>
	</s:HGroup>
	
</cw:DesktopWindow>
